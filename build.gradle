buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.13.0'
	id 'nebula.contacts' version '3.0.1'
	id 'nebula.facet' version '3.3.0'
	id 'nebula.lint' version '7.4.0'
	id 'org.sonarqube' version '2.2.1'
	id 'org.springframework.boot' version '1.5.5.RELEASE'
}

ext {
    javaVersion = '1.8'
    snippetsDir = file('build/generated-snippets')
}

// Define the classes that should not be analysed for code coverage both in Jacoco and Sonar
def excludedClasses() {
	return [
			'**/org/manuel/teambuilting/sports/controllers/*.*',
			'**/org/manuel/teambuilting/sports/config/*.*',
			'**/org/manuel/teambuilting/sports/messages/*.*',
			'**/org/manuel/teambuilting/sports/listeners/*.*',
	]
}

group 'org.manuel.teambuilting'
version '0.1.0-SNAPSHOT'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'

pmd {
	ignoreFailures = true
}

	findbugs {
	ignoreFailures = true
	effort = 'max'
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

jdepend {
	ignoreFailures = false
}

tasks.withType(JDepend) {
	reports {
		text.enabled = false
		xml.enabled = true
	}
}

gradleLint {
    alwaysRun = false
    criticalRules += 'archaic-wrapper'
    criticalRules += 'unused-dependency'
    rules += 'duplicate-dependency-class'
    rules += 'unused-exclude-by-dep'
}

jar {
	baseName = "${microserviceName}"
	version = project.version
}

contacts {
	'manuel.doncel.martos@gmail.com' {
		roles 'developer'
	}
}

facets {
	integrationTest {
		parentSourceSet = 'main'
		testTaskName = 'integrationTest'
		includeInCheckLifecycle = false
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Jacoco configuration, include only the classes that involve logic
jacocoTestReport {
    reports {
        html {
            enabled true
        }
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedClasses())
        })
    }
}

configurations {
	agent
	all {
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
	}
}

repositories {
	mavenLocal()
	maven { url 'https://repo.spring.io/milestone' }
	mavenCentral()
    maven { url "$projectDir/repo" }
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-actuator-docs'
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-web-services'
	compile "org.springframework:spring-aspects:5.0.0.M4"
	compile "org.springframework.boot:spring-boot-starter-amqp"
	compile 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compile 'org.manuel.teambuilting:teambuilting-messages:0.1.0-SNAPSHOT'
    compile 'org.manuel.teambuilting:teambuilting-core:0.1.0-SNAPSHOT'
    compile 'org.manuel.teambuilting:teambuilting-exceptions:0.1.0-SNAPSHOT'

	compile 'com.auth0:auth0-spring-security-mvc:1.2.3'
	compile 'com.auth0:auth0-spring-security-api:1.0.0-rc.2'
	
	compile 'javax.inject:javax.inject:1'

	compile 'com.google.maps:google-maps-services:0.1.17'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6'

	gradleLint.ignore('unused-dependency') {
		compileOnly 'org.projectlombok:lombok'
	}

	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.mockito:mockito-core'

	integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
	integrationTestCompile group: 'junit', name: 'junit', version: '4.12'
	integrationTestCompile 'org.hamcrest:hamcrest-core:1.3'
	//integrationTestCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "1.50.3"
	integrationTestCompile 'org.springframework.amqp:spring-rabbit-test:1.6.6.RELEASE'
	
}

bootRun {
    systemProperties 'user.timezone': 'UTC'

    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split('\\s+') as java.util.List)
    }
}

clean {
    delete 'log'
    delete 'bin'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pfd'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task stage {
    dependsOn build
}

task procfileTxt() << {
	def file = new File("$projectDir/Procfile")
	file.createNewFile()
	file.text = """web: java -Dserver.port=\$PORT -Dspring.profiles.active=production -jar build/libs/${microserviceName}-${version}.jar"""
}

build.finalizedBy(procfileTxt)